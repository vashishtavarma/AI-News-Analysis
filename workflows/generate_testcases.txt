# Pytest Test Generation Workflow for AI-News-Analysis

## 1. Scan Codebase
- Recursively scan all Python files in the project, excluding migrations and autogenerated files.
- Focus on the 'newsapp' Django app for business logic.

## 2. Select Target Modules
- Prioritize models.py, views.py, and any custom business logic modules.

## 3. Gather Context
- Read class and function docstrings, plus comments.
- Infer missing documentation from code structure and usage.

## 4. Draft Test Cases
- Write pytest unit tests for each model and view.
- Use clear, descriptive test function names (test_<unit>_<behavior>).
- Each test should have a single assertion unless logically grouped.
- Use pytest fixtures for reusable objects (e.g., user, region, sentiment, category).
- Mock external dependencies (e.g., GoogleNews, FinBERT) where needed.
- Ensure tests are deterministic and do not depend on external APIs or network.

## 5. Organize Test Files
- Place all tests in a top-level 'tests/' directory.
- Mirror the source structure (e.g., test_models.py, test_views.py).

## 6. Coverage & Quality
- Ensure at least 80% code coverage for business logic.
- Ensure all tests pass with pytest and are PEP8 compliant.
- Do NOT include workflow instructions or commit messages in test files.
